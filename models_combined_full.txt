==== user.py

# user.py
from flask_sqlalchemy import SQLAlchemy
from flask_login import UserMixin
from datetime import datetime
from HardwareTester.utils.bcrypt_utils import hash_password, check_password
from enum import Enum

db = SQLAlchemy()

class UserRole(Enum):
    ADMIN = 'admin'
    USER = 'user'
    GUEST = 'guest'

class TimestampMixin:
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class User(UserMixin, db.Model, TimestampMixin):
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(150), unique=True, nullable=False)
    username = db.Column(db.String(80), unique=True, nullable=False)
    password_hash = db.Column(db.String(200), nullable=False)
    role = db.Column(db.Enum(UserRole), default=UserRole.USER, nullable=False)

    def set_password(self, password):
        self.password_hash = hash_password(password)

    def check_password(self, password):
        return check_password(password, self.password_hash)

    def is_admin(self):
        return self.role == UserRole.ADMIN

    def __repr__(self):
        return f"<User {self.username}>"

==== role.py

# role.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from enum import Enum

db = SQLAlchemy()

class AccessLevel(Enum):
    READ = 'read'
    WRITE = 'write'
    EXECUTE = 'execute'
    FULL = 'full'

class TimestampMixin:
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Role(db.Model, TimestampMixin):
    __tablename__ = 'roles'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False)
    description = db.Column(db.String(255))
    access_level = db.Column(db.Enum(AccessLevel), default=AccessLevel.READ, nullable=False)

    def __repr__(self):
        return f"<Role {self.name}>"

==== configuration.py

# configuration.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class TimestampMixin:
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Configuration(db.Model, TimestampMixin):
    __tablename__ = 'configurations'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False, unique=True)
    layout = db.Column(db.JSON, nullable=False)  # JSON layout for valves and peripherals

    def __repr__(self):
        return f"<Configuration {self.name}>"

==== device.py

# device.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class TimestampMixin:
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Device(db.Model, TimestampMixin):
    __tablename__ = 'devices'

    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.String(255), nullable=False, unique=True)
    name = db.Column(db.String(255), nullable=False)
    firmware_version = db.Column(db.String(50), nullable=True)  # Firmware version
    device_metadata = db.Column(db.JSON, nullable=True)  # Metadata about the device

    def __repr__(self):
        return f"<Device {self.name} ({self.device_id})>"

==== peripheral.py

# peripheral.py
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class TimestampMixin:
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

class Peripheral(db.Model, TimestampMixin):
    __tablename__ = 'peripherals'

    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(255), nullable=False)
    type = db.Column(db.String(255), nullable=False)  # Sensor, Actuator, etc.
    properties = db.Column(db.JSON, nullable=True)  # Dynamic properties (e.g., temperature, pressure)
    device_id = db.Column(db.Integer, db.ForeignKey('devices.id'), nullable=False)

    device = db.relationship('Device', backref=db.backref('peripherals', lazy=True))

    def __repr__(self):
        return f"<Peripheral {self.name} ({self.type})>"

