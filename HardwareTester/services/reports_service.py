
# reports_service.py
import datetime
from HardwareTester.extensions import db
from HardwareTester.utils.custom_logger import CustomLogger
from HardwareTester.models.report_models import Report

# Initialize logger
logger = CustomLogger.get_logger("reports_service")


def generate_report(user_id, report_type, data):
    """
    Generate a report based on provided data.
    :param user_id: ID of the user generating the report.
    :param report_type: Type of report (e.g., "performance", "summary").
    :param data: Data to include in the report.
    :return: Success or error message.
    """
    try:
        report_name = f"{report_type}_report_{datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S')}.pdf"
        # Simulate report generation (you can use libraries like ReportLab or FPDF here)
        report_content = f"Report Type: {report_type}\nGenerated By: {user_id}\nData: {data}\nTimestamp: {datetime.datetime.utcnow()}"
        report_path = f"generated_reports/{report_name}"
        with open(report_path, "w") as report_file:
            report_file.write(report_content)

        # Save report metadata in the database
        new_report = Report(
            user_id=user_id,
            name=report_name,
            type=report_type,
            path=report_path,
            timestamp=datetime.datetime.utcnow(),
        )
        db.session.add(new_report)
        db.session.commit()
        logger.info(f"Report '{report_name}' generated and saved successfully.")
        return {"success": True, "message": f"Report '{report_name}' generated successfully.", "path": report_path}
    except Exception as e:
        logger.error(f"Failed to generate report: {e}")
        db.session.rollback()
        return {"success": False, "error": str(e)}

def fetch_reports(user_id):
    """
    Fetch all reports for a specific user.
    :param user_id: ID of the user.
    :return: List of reports or an error message.
    """
    try:
        reports = Report.query.filter_by(user_id=user_id).order_by(Report.timestamp.desc()).all()
        result = [
            {
                "id": report.id,
                "name": report.name,
                "type": report.type,
                "timestamp": report.timestamp.isoformat(),
                "path": report.path,
            }
            for report in reports
        ]
        logger.info(f"Fetched {len(result)} reports for user {user_id}.")
        return {"success": True, "reports": result}
    except Exception as e:
        logger.error(f"Failed to fetch reports for user {user_id}: {e}")
        return {"success": False, "error": str(e)}

def delete_report(report_id):
    """
    Delete a specific report.
    :param report_id: ID of the report.
    :return: Success or error message.
    """
    try:
        report = Report.query.get(report_id)
        if not report:
            logger.error(f"Report ID {report_id} not found.")
            return {"success": False, "error": "Report not found."}

        # Delete the report file from the filesystem
        try:
            import os
            if os.path.exists(report.path):
                os.remove(report.path)
                logger.info(f"Deleted report file: {report.path}")
        except Exception as e:
            logger.warning(f"Failed to delete report file: {e}")

        # Delete the report record from the database
        db.session.delete(report)
        db.session.commit()
        logger.info(f"Report ID {report_id} deleted.")
        return {"success": True, "message": "Report deleted successfully."}
    except Exception as e:
        logger.error(f"Failed to delete report {report_id}: {e}")
        db.session.rollback()
        return {"success": False, "error": str(e)}

def clear_all_reports(user_id):
    """
    Clear all reports for a specific user.
    :param user_id: ID of the user.
    :return: Success or error message.
    """
    try:
        reports = Report.query.filter_by(user_id=user_id).all()
        for report in reports:
            delete_report(report.id) # Reuse the delete_report function
        logger.info(f"Cleared all reports for user {user_id}.")
        return {"success": True, "message": "All reports cleared successfully."}
    except Exception as e:
        logger.error(f"Failed to clear reports for user {user_id}: {e}")
        return {"success": False, "error": str(e)}

def get_report_details(report_id):
    """
    Fetch detailed information about a specific report.
    :param report_id: ID of the report.
    :return: Report details or an error message.
    """
    try:
        report = Report.query.get(report_id)
        if not report:
            logger.error(f"Report ID {report_id} not found.")
            return {"success": False, "error": "Report not found."}

        details = {
            "id": report.id,
            "name": report.name,
            "type": report.type,
            "timestamp": report.timestamp.isoformat(),
            "path": report.path,
        }
        logger.info(f"Fetched details for report ID {report_id}.")
        return {"success": True, "details": details}
    except Exception as e:
        logger.error(f"Failed to fetch report details for report {report_id}: {e}")
        return {"success": False, "error": str(e)}

