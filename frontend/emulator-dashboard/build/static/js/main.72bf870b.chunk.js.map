{"version":3,"sources":["services/hardwareService.js","components/HardwarePanel.js","services/emulatorService.js","components/EmulatorPanel.js","components/MQTTPanel.js","components/SerialPanel.js","services/mqttService.js","services/dashboardService.js","components/LiveMetrics.js","components/MirrorModal.js","components/ActiveEmulations.js","components/Dashboard.js","App.js","index.js"],"names":["BASE_URL","HardwarePanel","devices","setDevices","useState","selectedDevice","setSelectedDevice","useEffect","async","axios","get","concat","data","error","console","listDevices","then","handleDeviceClick","deviceId","device","getDeviceDetails","_jsxs","children","_jsx","map","onClick","id","name","JSON","stringify","API_BASE","EmulatorPanel","emulations","setEmulations","firmwareFile","setFirmwareFile","selectedEmulation","logs","setLogs","loadEmulations","getActiveEmulations","handleStopEmulation","post","emulationId","stopEmulation","handleViewLogs","getEmulationLogs","handleExportLogs","responseType","exportLogs","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","className","emulationData","startEmulation","deviceType","firmwareVersion","emu","status","type","onChange","e","target","files","formData","FormData","append","headers","uploadFirmware","eventConfig","eventType","triggerTime","Date","now","_objectSpread","setTimedEvent","enableUIMirror","join","MQTTPanel","brokerUrl","setBrokerUrl","client","setClient","isConnected","setIsConnected","topic","setTopic","message","setMessage","receivedMessages","setReceivedMessages","subscribedTopics","setSubscribedTopics","scheduledMessages","setScheduledMessages","eventTimeouts","useRef","end","handlePublish","publish","value","placeholder","handleDisconnect","handleConnect","mqttClient","mqtt","connect","clientId","Math","random","toString","substr","on","log","receivedTopic","payload","messageObj","timestamp","toLocaleTimeString","prev","err","disabled","handleSubscribe","subscribe","sub","index","handleUnsubscribe","unsubscribeTopic","unsubscribe","filter","t","msg","delay","time","alert","eventId","setTimeout","current","push","scheduleMessage","cancelScheduledMessages","forEach","timeoutId","clearTimeout","readOnly","rows","cols","SerialPanel","ports","setPorts","selectedPort","setSelectedPort","baudRate","setBaudRate","serialData","setSerialData","hexMode","setHexMode","autoReconnect","setAutoReconnect","commandHistory","setCommandHistory","serialRef","fetch","res","json","catch","method","port","ok","listenToSerial","EventSource","onmessage","event","incomingData","onerror","messageToHex","text","split","char","charCodeAt","parseInt","close","checked","trim","formattedMessage","cmd","reconnectAttempts","subscriptions","Set","eventListeners","connectMQTT","connected","warn","reconnectPeriod","clean","handleReconnect","callback","subscribeToTopic","add","unsubscribeFromTopic","delete","sendMQTTCommand","deviceTopic","command","publishMessage","qos","listenToMQTT","LiveMetrics","systemStatus","setSystemStatus","activeEmulations","setActiveEmulations","cpuData","setCpuData","memoryData","setMemoryData","networkData","setNetworkData","deviceMetrics","setDeviceMetrics","alerts","setAlerts","cpuChartRef","memoryChartRef","networkChartRef","handleMetricUpdate","useCallback","parseFloat","slice","checkThreshold","parse","prevMetrics","initializeCharts","ctxCPU","getElementById","getContext","ctxMemory","ctxNetwork","createChart","fetchSystemMetrics","fetchActiveEmulations","topics","cpu","memory","network","Object","entries","_ref","values","destroy","getSystemStatus","metric","threshold","prevAlerts","ctx","label","Chart","labels","Array","fill","datasets","borderColor","options","responsive","scales","x","display","y","beginAtZero","_ref2","key","length","MirrorModal","onClose","messages","setMessages","setCommand","commandStatus","setCommandStatus","handleMessage","idx","ActiveEmulations","setFilter","filteredEmulations","emulation","some","toLowerCase","includes","style","maxHeight","overflowY","background","padding","marginBottom","Dashboard","flexDirection","height","flex","App","ReactDOM","createRoot","render","React","StrictMode"],"mappings":"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","file":"static/js/main.72bf870b.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"http://localhost:5000/api/hardware\";\r\n\r\nexport const listDevices = async () => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/list`);\r\n        return response.data.devices || [];\r\n    } catch (error) {\r\n        console.error(\"Error fetching devices:\", error);\r\n        return [];\r\n    }\r\n};\r\n\r\nexport const getDeviceDetails = async (deviceId) => {\r\n    try {\r\n        const response = await axios.get(`${BASE_URL}/device/${deviceId}`);\r\n        return response.data.device || null;\r\n    } catch (error) {\r\n        console.error(`Error fetching details for device ${deviceId}:`, error);\r\n        return null;\r\n    }\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { listDevices, getDeviceDetails } from \"../services/hardwareService\";\r\n\r\nconst HardwarePanel = () => {\r\n    const [devices, setDevices] = useState([]);\r\n    const [selectedDevice, setSelectedDevice] = useState(null);\r\n\r\n    useEffect(() => {\r\n        listDevices().then(setDevices);\r\n    }, []);\r\n\r\n    const handleDeviceClick = (deviceId) => {\r\n        getDeviceDetails(deviceId).then(setSelectedDevice);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Devices</h3>\r\n            <ul>\r\n                {devices.map((device) => (\r\n                    <li key={device.id} onClick={() => handleDeviceClick(device.id)}>\r\n                        {device.name}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedDevice && (\r\n                <div>\r\n                    <h4>Details for {selectedDevice.name}</h4>\r\n                    <pre>{JSON.stringify(selectedDevice, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HardwarePanel;\r\n","import axios from \"axios\";\r\n\r\nconst API_BASE = \"http://localhost:5000/api/emulator\";\r\n\r\n/**\r\n * Starts an emulation session for a specific device.\r\n * @param {Object} emulationData - Device emulation configuration.\r\n * @returns {Promise} - API response.\r\n */\r\nexport const startEmulation = async (emulationData) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE}/start`, emulationData);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error starting emulation:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Stops a running emulation session.\r\n * @param {string} emulationId - ID of the emulation session.\r\n * @returns {Promise} - API response.\r\n */\r\nexport const stopEmulation = async (emulationId) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE}/stop`, { emulationId });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error stopping emulation:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches all active emulations.\r\n * @returns {Promise<Array>} - List of active emulations.\r\n */\r\nexport const getActiveEmulations = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/active`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching active emulations:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Uploads firmware for validation.\r\n * @param {File} firmwareFile - The firmware file.\r\n * @returns {Promise} - Validation result.\r\n */\r\nexport const uploadFirmware = async (firmwareFile) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", firmwareFile);\r\n\r\n    try {\r\n        const response = await axios.post(`${API_BASE}/upload-firmware`, formData, {\r\n            headers: { \"Content-Type\": \"multipart/form-data\" },\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error uploading firmware:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Sets up a timed event trigger for an emulated device.\r\n * @param {string} emulationId - ID of the emulation session.\r\n * @param {Object} eventConfig - Configuration for the timed event.\r\n * @returns {Promise} - API response.\r\n */\r\nexport const setTimedEvent = async (emulationId, eventConfig) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE}/set-timed-event`, {\r\n            emulationId,\r\n            ...eventConfig,\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error setting timed event:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Enables UI mirroring mode for an emulated touch controller.\r\n * @param {string} emulationId - ID of the emulation session.\r\n * @returns {Promise} - API response.\r\n */\r\nexport const enableUIMirror = async (emulationId) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE}/enable-mirror`, { emulationId });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error enabling UI mirroring:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches logs for a specific emulation session.\r\n * @param {string} emulationId - ID of the emulation session.\r\n * @returns {Promise<Array>} - List of logs.\r\n */\r\nexport const getEmulationLogs = async (emulationId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/logs/${emulationId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching emulation logs:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Exports logs for an emulation session.\r\n * @param {string} emulationId - ID of the emulation session.\r\n * @returns {Promise<Blob>} - Exported log file.\r\n */\r\nexport const exportLogs = async (emulationId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/export-logs/${emulationId}`, {\r\n            responseType: \"blob\",\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error exporting logs:\", error);\r\n        throw error;\r\n    }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n    startEmulation,\r\n    stopEmulation,\r\n    getActiveEmulations,\r\n    uploadFirmware,\r\n    setTimedEvent,\r\n    enableUIMirror,\r\n    getEmulationLogs,\r\n    exportLogs,\r\n} from \"../services/emulatorService\";\r\n\r\nconst EmulatorPanel = () => {\r\n    const [emulations, setEmulations] = useState([]);\r\n    const [firmwareFile, setFirmwareFile] = useState(null);\r\n    const [selectedEmulation] = useState(null);\r\n    const [logs, setLogs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        loadEmulations();\r\n    }, []);\r\n\r\n    const loadEmulations = async () => {\r\n        const data = await getActiveEmulations();\r\n        setEmulations(data);\r\n    };\r\n\r\n    const handleStartEmulation = async () => {\r\n        const emulationData = {\r\n            deviceType: \"CustomDevice\",\r\n            firmwareVersion: \"1.0.0\",\r\n        };\r\n        await startEmulation(emulationData);\r\n        loadEmulations();\r\n    };\r\n\r\n    const handleStopEmulation = async (emulationId) => {\r\n        await stopEmulation(emulationId);\r\n        loadEmulations();\r\n    };\r\n\r\n    const handleFirmwareUpload = async () => {\r\n        if (!firmwareFile) return;\r\n        await uploadFirmware(firmwareFile);\r\n    };\r\n\r\n    const handleSetTimedEvent = async () => {\r\n        if (!selectedEmulation) return;\r\n        const eventConfig = {\r\n            eventType: \"trigger-action\",\r\n            triggerTime: Date.now() + 60000,\r\n        };\r\n        await setTimedEvent(selectedEmulation.id, eventConfig);\r\n    };\r\n\r\n    const handleEnableMirror = async () => {\r\n        if (!selectedEmulation) return;\r\n        await enableUIMirror(selectedEmulation.id);\r\n    };\r\n\r\n    const handleViewLogs = async (emulationId) => {\r\n        const data = await getEmulationLogs(emulationId);\r\n        setLogs(data);\r\n    };\r\n\r\n    const handleExportLogs = async (emulationId) => {\r\n        const data = await exportLogs(emulationId);\r\n        const url = window.URL.createObjectURL(new Blob([data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.setAttribute(\"download\", `emulation_logs_${emulationId}.txt`);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n    };\r\n\r\n    return (\r\n        <div className=\"emulator-panel\">\r\n            <h1>Emulator Dashboard</h1>\r\n\r\n            <button onClick={handleStartEmulation}>Start New Emulation</button>\r\n\r\n            <h2>Active Emulations</h2>\r\n            <ul>\r\n                {emulations.map((emu) => (\r\n                    <li key={emu.id}>\r\n                        {emu.name} - {emu.status}\r\n                        <button onClick={() => handleStopEmulation(emu.id)}>Stop</button>\r\n                        <button onClick={() => handleViewLogs(emu.id)}>View Logs</button>\r\n                        <button onClick={() => handleExportLogs(emu.id)}>Export Logs</button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h2>Firmware Upload</h2>\r\n            <input type=\"file\" onChange={(e) => setFirmwareFile(e.target.files[0])} />\r\n            <button onClick={handleFirmwareUpload}>Upload</button>\r\n\r\n            <h2>Other Actions</h2>\r\n            <button onClick={handleSetTimedEvent}>Set Timed Event</button>\r\n            <button onClick={handleEnableMirror}>Enable UI Mirror</button>\r\n\r\n            <h2>Logs</h2>\r\n            <pre>{logs.join(\"\\n\")}</pre>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EmulatorPanel;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport mqtt from \"mqtt\";\r\n\r\nconst MQTTPanel = () => {\r\n    // State management\r\n    const [brokerUrl, setBrokerUrl] = useState(\"wss://test.mosquitto.org:8081\");\r\n    const [client, setClient] = useState(null);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [topic, setTopic] = useState(\"\");\r\n    const [message, setMessage] = useState(\"\");\r\n    const [receivedMessages, setReceivedMessages] = useState([]);\r\n    const [subscribedTopics, setSubscribedTopics] = useState([]);\r\n    const [scheduledMessages, setScheduledMessages] = useState([]);\r\n    const eventTimeouts = useRef([]);\r\n\r\n    // Initialize MQTT client\r\n    useEffect(() => {\r\n        return () => {\r\n            if (client) {\r\n                client.end();\r\n            }\r\n        };\r\n    }, [client]);\r\n\r\n    const handleConnect = () => {\r\n        const mqttClient = mqtt.connect(brokerUrl, {\r\n            clientId: `mqtt_client_${Math.random().toString(16).substr(2, 8)}`,\r\n        });\r\n\r\n        mqttClient.on(\"connect\", () => {\r\n            setIsConnected(true);\r\n            console.log(\"Connected to MQTT Broker:\", brokerUrl);\r\n        });\r\n\r\n        mqttClient.on(\"message\", (receivedTopic, payload) => {\r\n            const messageObj = {\r\n                topic: receivedTopic,\r\n                message: payload.toString(),\r\n                timestamp: new Date().toLocaleTimeString(),\r\n            };\r\n            setReceivedMessages((prev) => [...prev, messageObj]);\r\n        });\r\n\r\n        mqttClient.on(\"error\", (err) => {\r\n            console.error(\"MQTT Error:\", err);\r\n            setIsConnected(false);\r\n        });\r\n\r\n        setClient(mqttClient);\r\n    };\r\n\r\n    const handleDisconnect = () => {\r\n        if (client) {\r\n            client.end();\r\n            setIsConnected(false);\r\n            setClient(null);\r\n        }\r\n    };\r\n\r\n    const handleSubscribe = () => {\r\n        if (client && topic) {\r\n            client.subscribe(topic, (err) => {\r\n                if (!err) {\r\n                    setSubscribedTopics((prev) => [...prev, topic]);\r\n                    console.log(`Subscribed to topic: ${topic}`);\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleUnsubscribe = (unsubscribeTopic) => {\r\n        if (client) {\r\n            client.unsubscribe(unsubscribeTopic, () => {\r\n                setSubscribedTopics((prev) => prev.filter((t) => t !== unsubscribeTopic));\r\n                console.log(`Unsubscribed from topic: ${unsubscribeTopic}`);\r\n            });\r\n        }\r\n    };\r\n\r\n    const handlePublish = () => {\r\n        if (client && topic && message) {\r\n            client.publish(topic, message);\r\n            setMessage(\"\");\r\n        }\r\n    };\r\n\r\n    const scheduleMessage = (delay) => {\r\n        if (!topic || !message) {\r\n            alert(\"Enter topic and message before scheduling.\");\r\n            return;\r\n        }\r\n        const eventId = setTimeout(() => {\r\n            handlePublish();\r\n        }, delay);\r\n        eventTimeouts.current.push(eventId);\r\n        setScheduledMessages((prev) => [\r\n            ...prev,\r\n            { topic, message, delay, id: eventId, time: new Date().toLocaleTimeString() },\r\n        ]);\r\n    };\r\n\r\n    const cancelScheduledMessages = () => {\r\n        eventTimeouts.current.forEach((timeoutId) => clearTimeout(timeoutId));\r\n        setScheduledMessages([]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"mqtt-panel\">\r\n            <h1>MQTT Communication Panel</h1>\r\n\r\n            {/* Broker Connection */}\r\n            <div>\r\n                <label>Broker URL:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={brokerUrl}\r\n                    onChange={(e) => setBrokerUrl(e.target.value)}\r\n                    placeholder=\"Enter broker URL\"\r\n                />\r\n                {!isConnected ? (\r\n                    <button onClick={handleConnect}>Connect</button>\r\n                ) : (\r\n                    <button onClick={handleDisconnect}>Disconnect</button>\r\n                )}\r\n            </div>\r\n\r\n            {/* Topic Subscription */}\r\n            <div>\r\n                <label>Topic:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={topic}\r\n                    onChange={(e) => setTopic(e.target.value)}\r\n                    placeholder=\"Enter topic\"\r\n                    disabled={!isConnected}\r\n                />\r\n                <button onClick={handleSubscribe} disabled={!isConnected || !topic}>\r\n                    Subscribe\r\n                </button>\r\n            </div>\r\n\r\n            {/* Subscribed Topics */}\r\n            <div>\r\n                <h3>Subscribed Topics</h3>\r\n                <ul>\r\n                    {subscribedTopics.map((sub, index) => (\r\n                        <li key={index}>\r\n                            {sub}{\" \"}\r\n                            <button onClick={() => handleUnsubscribe(sub)}>Unsubscribe</button>\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n\r\n            {/* Publish Message */}\r\n            <div>\r\n                <label>Message:</label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={message}\r\n                    onChange={(e) => setMessage(e.target.value)}\r\n                    placeholder=\"Enter message\"\r\n                    disabled={!isConnected}\r\n                />\r\n                <button onClick={handlePublish} disabled={!isConnected || !topic || !message}>\r\n                    Publish\r\n                </button>\r\n            </div>\r\n\r\n            {/* Scheduled Messages */}\r\n            <div>\r\n                <h3>Scheduled Messages</h3>\r\n                {scheduledMessages.map((msg, index) => (\r\n                    <div key={index}>\r\n                        <p>\r\n                            <strong>Topic:</strong> {msg.topic}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Message:</strong> {msg.message}\r\n                        </p>\r\n                        <p>\r\n                            <strong>Scheduled for:</strong> {msg.delay}ms at {msg.time}\r\n                        </p>\r\n                    </div>\r\n                ))}\r\n                <button onClick={() => scheduleMessage(5000)}>Schedule Message (5s)</button>\r\n                <button onClick={cancelScheduledMessages}>Cancel Scheduled Messages</button>\r\n            </div>\r\n\r\n            {/* Received Messages */}\r\n            <div>\r\n                <h3>Received Messages</h3>\r\n                <textarea value={receivedMessages.map(msg => `[${msg.timestamp}] ${msg.topic}: ${msg.message}`).join(\"\\n\")} readOnly rows=\"8\" cols=\"50\" />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MQTTPanel;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\n\r\nconst SerialPanel = () => {\r\n    const [ports, setPorts] = useState([]);\r\n    const [selectedPort, setSelectedPort] = useState(\"\");\r\n    const [baudRate, setBaudRate] = useState(115200);\r\n    const [isConnected, setIsConnected] = useState(false);\r\n    const [serialData, setSerialData] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n    const [hexMode, setHexMode] = useState(false);\r\n    const [autoReconnect, setAutoReconnect] = useState(true);\r\n    const [commandHistory, setCommandHistory] = useState([]);\r\n    const serialRef = useRef(null);\r\n\r\n    // Fetch available serial ports on load\r\n    useEffect(() => {\r\n        fetch(\"/api/serial/ports\")\r\n            .then((res) => res.json())\r\n            .then((data) => setPorts(data))\r\n            .catch((error) => console.error(\"Error fetching ports:\", error));\r\n    }, []);\r\n\r\n    // Connect to serial port\r\n    const handleConnect = async () => {\r\n        if (!selectedPort) return alert(\"Select a port first!\");\r\n\r\n        try {\r\n            const response = await fetch(\"/api/serial/connect\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ port: selectedPort, baudRate }),\r\n            });\r\n\r\n            if (response.ok) {\r\n                setIsConnected(true);\r\n                listenToSerial();\r\n            } else {\r\n                alert(\"Failed to connect.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Connection error:\", error);\r\n        }\r\n    };\r\n\r\n    // Listen to serial data\r\n    const listenToSerial = () => {\r\n        if (!isConnected) return;\r\n\r\n        serialRef.current = new EventSource(\"/api/serial/listen\");\r\n\r\n        serialRef.current.onmessage = (event) => {\r\n            const incomingData = event.data;\r\n            setSerialData((prev) => [...prev, incomingData]);\r\n        };\r\n\r\n        serialRef.current.onerror = () => {\r\n            console.error(\"Serial stream error.\");\r\n            if (autoReconnect) {\r\n                console.log(\"Reconnecting...\");\r\n                setTimeout(handleConnect, 2000);\r\n            }\r\n        };\r\n    };\r\n\r\n    // Disconnect from serial port\r\n    const handleDisconnect = async () => {\r\n        try {\r\n            await fetch(\"/api/serial/disconnect\", { method: \"POST\" });\r\n            setIsConnected(false);\r\n            if (serialRef.current) serialRef.current.close();\r\n        } catch (error) {\r\n            console.error(\"Disconnection error:\", error);\r\n        }\r\n    };\r\n\r\n    // Send data over serial\r\n    const handleSendData = async () => {\r\n        if (!message.trim()) return;\r\n\r\n        try {\r\n            const formattedMessage = hexMode ? messageToHex(message) : message;\r\n            await fetch(\"/api/serial/send\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({ message: formattedMessage }),\r\n            });\r\n\r\n            setCommandHistory((prev) => [...prev, formattedMessage]);\r\n            setMessage(\"\");\r\n        } catch (error) {\r\n            console.error(\"Error sending data:\", error);\r\n        }\r\n    };\r\n\r\n    // Convert text to hex\r\n    const messageToHex = (text) => {\r\n        return text.split(\"\").map((char) => char.charCodeAt(0).toString(16)).join(\" \");\r\n    };\r\n\r\n    return (\r\n        <div className=\"serial-panel\">\r\n            <h2>Serial Communication Panel</h2>\r\n\r\n            {/* Port Selection */}\r\n            <div>\r\n                <label>Serial Port:</label>\r\n                <select value={selectedPort} onChange={(e) => setSelectedPort(e.target.value)} disabled={isConnected}>\r\n                    <option value=\"\">-- Select a port --</option>\r\n                    {ports.map((port, index) => (\r\n                        <option key={index} value={port}>\r\n                            {port}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* Baud Rate */}\r\n            <div>\r\n                <label>Baud Rate:</label>\r\n                <input type=\"number\" value={baudRate} onChange={(e) => setBaudRate(parseInt(e.target.value))} disabled={isConnected} />\r\n            </div>\r\n\r\n            {/* Connect/Disconnect */}\r\n            <div>\r\n                {!isConnected ? (\r\n                    <button onClick={handleConnect} disabled={!selectedPort}>\r\n                        Connect\r\n                    </button>\r\n                ) : (\r\n                    <button onClick={handleDisconnect}>Disconnect</button>\r\n                )}\r\n            </div>\r\n\r\n            {/* Hex Mode & Auto Reconnect */}\r\n            <div>\r\n                <label>\r\n                    <input type=\"checkbox\" checked={hexMode} onChange={() => setHexMode(!hexMode)} />\r\n                    Hex Mode\r\n                </label>\r\n                <br />\r\n                <label>\r\n                    <input type=\"checkbox\" checked={autoReconnect} onChange={() => setAutoReconnect(!autoReconnect)} />\r\n                    Auto Reconnect\r\n                </label>\r\n            </div>\r\n\r\n            {/* Send Data */}\r\n            <div>\r\n                <label>Send Message:</label>\r\n                <input type=\"text\" value={message} onChange={(e) => setMessage(e.target.value)} placeholder=\"Enter message\" disabled={!isConnected} />\r\n                <button onClick={handleSendData} disabled={!isConnected || !message}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n\r\n            {/* Received Data */}\r\n            <div>\r\n                <h3>Received Data</h3>\r\n                <textarea value={serialData.join(\"\\n\")} readOnly rows=\"5\" cols=\"50\" />\r\n            </div>\r\n\r\n            {/* Command History */}\r\n            <div>\r\n                <h3>Command History</h3>\r\n                <ul>\r\n                    {commandHistory.map((cmd, index) => (\r\n                        <li key={index}>{cmd}</li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SerialPanel;\r\n","import mqtt from \"mqtt\";\r\n\r\nconst MQTT_BROKER = \"ws://localhost:1883\"; // Update this with your broker URL\r\nconst RECONNECT_INTERVAL = 5000; // Auto-reconnect delay (5 seconds)\r\nconst MAX_RECONNECT_ATTEMPTS = 10; // Limit reconnect attempts\r\n\r\nlet client = null;\r\nlet reconnectAttempts = 0;\r\nlet subscriptions = new Set();\r\nlet eventListeners = {};\r\n\r\n/**\r\n * Initializes and connects to the MQTT broker.\r\n */\r\nexport const connectMQTT = () => {\r\n    if (client && client.connected) {\r\n        console.warn(\"MQTT already connected.\");\r\n        return;\r\n    }\r\n\r\n    console.log(\"Connecting to MQTT broker...\");\r\n\r\n    client = mqtt.connect(MQTT_BROKER, {\r\n        reconnectPeriod: RECONNECT_INTERVAL,\r\n        clientId: `emulator-${Math.random().toString(16).substr(2, 8)}`,\r\n        clean: false, // Ensures persistent sessions\r\n    });\r\n\r\n    client.on(\"connect\", () => {\r\n        console.log(\"Connected to MQTT broker.\");\r\n        reconnectAttempts = 0;\r\n        // Resubscribe to topics after reconnect\r\n        subscriptions.forEach((topic) => client.subscribe(topic));\r\n    });\r\n\r\n    client.on(\"error\", (error) => {\r\n        console.error(\"MQTT Connection Error:\", error);\r\n        client.end();\r\n        handleReconnect();\r\n    });\r\n\r\n    client.on(\"offline\", () => {\r\n        console.warn(\"MQTT is offline. Attempting to reconnect...\");\r\n        handleReconnect();\r\n    });\r\n\r\n    client.on(\"message\", (topic, message) => {\r\n        console.log(`Received MQTT message on ${topic}:`, message.toString());\r\n        if (eventListeners[topic]) {\r\n            eventListeners[topic].forEach((callback) => callback(message.toString()));\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Handles auto-reconnection logic.\r\n */\r\nconst handleReconnect = () => {\r\n    if (reconnectAttempts >= MAX_RECONNECT_ATTEMPTS) {\r\n        console.error(\"Max MQTT reconnect attempts reached. Manual restart required.\");\r\n        return;\r\n    }\r\n    reconnectAttempts++;\r\n    console.log(`Reconnecting to MQTT broker (Attempt ${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`);\r\n    setTimeout(connectMQTT, RECONNECT_INTERVAL);\r\n};\r\n\r\n/**\r\n * Subscribes to a specific MQTT topic.\r\n * @param {string} topic - The topic to subscribe to.\r\n * @param {function} callback - Function to handle received messages.\r\n */\r\nexport const subscribeToTopic = (topic, callback) => {\r\n    if (!client || !client.connected) {\r\n        console.warn(\"Cannot subscribe. MQTT not connected.\");\r\n        return;\r\n    }\r\n    client.subscribe(topic, (err) => {\r\n        if (!err) {\r\n            console.log(`Subscribed to topic: ${topic}`);\r\n            subscriptions.add(topic);\r\n            if (!eventListeners[topic]) {\r\n                eventListeners[topic] = [];\r\n            }\r\n            eventListeners[topic].push(callback);\r\n        } else {\r\n            console.error(`Error subscribing to topic ${topic}:`, err);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Unsubscribes from a specific MQTT topic.\r\n * @param {string} topic - The topic to unsubscribe from.\r\n */\r\nexport const unsubscribeFromTopic = (topic) => {\r\n    if (!client || !client.connected) {\r\n        console.warn(\"Cannot unsubscribe. MQTT not connected.\");\r\n        return;\r\n    }\r\n    client.unsubscribe(topic, (err) => {\r\n        if (!err) {\r\n            console.log(`Unsubscribed from topic: ${topic}`);\r\n            subscriptions.delete(topic);\r\n            delete eventListeners[topic];\r\n        } else {\r\n            console.error(`Error unsubscribing from topic ${topic}:`, err);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Publishes a message to an MQTT topic.\r\n * @param {string} topic - The topic to publish to.\r\n * @param {string} message - The message payload.\r\n */\r\nexport const publishMessage = (topic, message) => {\r\n    if (!client || !client.connected) {\r\n        console.warn(\"Cannot publish. MQTT not connected.\");\r\n        return;\r\n    }\r\n    client.publish(topic, message, { qos: 1 }, (err) => {\r\n        if (!err) {\r\n            console.log(`Published message to ${topic}: ${message}`);\r\n        } else {\r\n            console.error(`Error publishing to ${topic}:`, err);\r\n        }\r\n    });\r\n};\r\n\r\n/**\r\n * Sends a structured command message to a device.\r\n * @param {string} deviceTopic - The MQTT topic of the device.\r\n * @param {Object} command - The command object to send.\r\n */\r\nexport const sendMQTTCommand = (deviceTopic, command) => {\r\n    if (!deviceTopic || !command) {\r\n        console.error(\"Missing parameters for sendMQTTCommand\");\r\n        return;\r\n    }\r\n    publishMessage(deviceTopic, JSON.stringify(command));\r\n};\r\n\r\n/**\r\n * Disconnects from the MQTT broker.\r\n */\r\nexport const disconnectMQTT = () => {\r\n    if (!client) return;\r\n    console.log(\"Disconnecting from MQTT broker...\");\r\n    client.end();\r\n};\r\n\r\n/**\r\n * Listens for messages on a given topic.\r\n * @param {string} topic - The topic to listen to.\r\n * @param {function} callback - Function to execute when a message is received.\r\n */\r\nexport const listenToMQTT = (topic, callback) => {\r\n    subscribeToTopic(topic, callback);\r\n};\r\n\r\n/**\r\n * Returns the current connection status of MQTT.\r\n * @returns {boolean} Whether MQTT is connected.\r\n */\r\nexport const isMQTTConnected = () => {\r\n    return client && client.connected;\r\n};\r\n","import axios from \"axios\";\r\n\r\nconst API_BASE = \"http://localhost:5000/api/dashboard\";\r\n\r\n/**\r\n * Fetches full dashboard metrics including active emulations, system health, and logs.\r\n * @returns {Promise<Object>} Dashboard data\r\n */\r\nexport const getDashboardData = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/metrics`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching dashboard data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches system status including CPU, memory, and network information.\r\n * @returns {Promise<Object>} System health data\r\n */\r\nexport const getSystemStatus = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/system-status`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching system status:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches currently active emulations.\r\n * @returns {Promise<Array>} List of active emulations\r\n */\r\nexport const getActiveEmulations = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/active-emulations`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching active emulations:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches detailed logs for a specific emulation session.\r\n * @param {string} emulationId - The ID of the emulation session.\r\n * @returns {Promise<Array>} List of logs\r\n */\r\nexport const getEmulationLogs = async (emulationId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/logs/${emulationId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching emulation logs:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches error reports and system diagnostics.\r\n * @returns {Promise<Array>} List of recent errors and diagnostics\r\n */\r\nexport const getErrorReports = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/error-reports`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching error reports:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches specific test metrics related to hardware testing.\r\n * @returns {Promise<Array>} Test execution results and reports\r\n */\r\nexport const getTestMetrics = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/test-metrics`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching test metrics:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Exports dashboard logs for analysis.\r\n * @returns {Promise<Blob>} Log file\r\n */\r\nexport const exportDashboardLogs = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/export-logs`, {\r\n            responseType: \"blob\",\r\n        });\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error exporting logs:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\n/**\r\n * Fetches custom analytics based on user-defined widgets.\r\n * @param {string} widgetId - ID of the custom widget.\r\n * @returns {Promise<Object>} Custom analytics data\r\n */\r\nexport const getCustomWidgetData = async (widgetId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE}/custom-widget/${widgetId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error(\"Error fetching custom widget data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n","import React, { useState, useEffect, useRef, useCallback } from \"react\";\r\nimport { connectMQTT, listenToMQTT, unsubscribeFromTopic } from \"../services/mqttService\";\r\nimport { getSystemStatus, getActiveEmulations } from \"../services/dashboardService\";\r\nimport Chart from \"chart.js/auto\";\r\n\r\nconst LiveMetrics = () => {\r\n    const [systemStatus, setSystemStatus] = useState({});\r\n    const [activeEmulations, setActiveEmulations] = useState([]);\r\n    const [cpuData, setCpuData] = useState([]);\r\n    const [memoryData, setMemoryData] = useState([]);\r\n    const [networkData, setNetworkData] = useState([]);\r\n    const [deviceMetrics, setDeviceMetrics] = useState({});\r\n    const [alerts, setAlerts] = useState([]);\r\n\r\n    // Chart references\r\n    const cpuChartRef = useRef(null);\r\n    const memoryChartRef = useRef(null);\r\n    const networkChartRef = useRef(null);\r\n\r\n    /**\r\n     * Handles incoming system metrics (CPU, Memory, Network).\r\n     */\r\n    const handleMetricUpdate = useCallback((type, message) => {\r\n        const value = parseFloat(message);\r\n        switch (type) {\r\n            case \"cpu\":\r\n                setCpuData((prev) => [...prev.slice(-49), value]);\r\n                checkThreshold(\"CPU\", value, 85);\r\n                break;\r\n            case \"memory\":\r\n                setMemoryData((prev) => [...prev.slice(-49), value]);\r\n                checkThreshold(\"Memory\", value, 90);\r\n                break;\r\n            case \"network\":\r\n                setNetworkData((prev) => [...prev.slice(-49), value]);\r\n                break;\r\n            case \"devices\":\r\n                const data = JSON.parse(message);\r\n                setDeviceMetrics((prevMetrics) => ({ ...prevMetrics, ...data }));\r\n                break;\r\n            default:\r\n                console.warn(\"Unknown metric type:\", type);\r\n        }\r\n    }, []);\r\n\r\n    /**\r\n     * Initializes charts when the component mounts.\r\n     */\r\n    const initializeCharts = useCallback(() => {\r\n        const ctxCPU = document.getElementById(\"cpuChart\").getContext(\"2d\");\r\n        const ctxMemory = document.getElementById(\"memoryChart\").getContext(\"2d\");\r\n        const ctxNetwork = document.getElementById(\"networkChart\").getContext(\"2d\");\r\n\r\n        cpuChartRef.current = createChart(ctxCPU, \"CPU Usage\");\r\n        memoryChartRef.current = createChart(ctxMemory, \"Memory Usage\");\r\n        networkChartRef.current = createChart(ctxNetwork, \"Network Traffic\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        connectMQTT();\r\n        fetchSystemMetrics();\r\n        fetchActiveEmulations();\r\n        initializeCharts();\r\n\r\n        const topics = {\r\n            cpu: \"system/cpu\",\r\n            memory: \"system/memory\",\r\n            network: \"system/network\",\r\n            devices: \"devices/metrics\",\r\n        };\r\n\r\n        Object.entries(topics).forEach(([type, topic]) => {\r\n            listenToMQTT(topic, (message) => handleMetricUpdate(type, message));\r\n        });\r\n\r\n        return () => {\r\n            Object.values(topics).forEach((topic) => unsubscribeFromTopic(topic));\r\n\r\n            if (cpuChartRef.current) cpuChartRef.current.destroy();\r\n            if (memoryChartRef.current) memoryChartRef.current.destroy();\r\n            if (networkChartRef.current) networkChartRef.current.destroy();\r\n        };\r\n    }, [handleMetricUpdate, initializeCharts]);\r\n\r\n    const fetchSystemMetrics = async () => {\r\n        try {\r\n            const status = await getSystemStatus();\r\n            setSystemStatus(status);\r\n        } catch (error) {\r\n            console.error(\"Error fetching system metrics:\", error);\r\n        }\r\n    };\r\n\r\n    const fetchActiveEmulations = async () => {\r\n        try {\r\n            const emulations = await getActiveEmulations();\r\n            setActiveEmulations(emulations);\r\n        } catch (error) {\r\n            console.error(\"Error fetching active emulations:\", error);\r\n        }\r\n    };\r\n\r\n    const checkThreshold = (metric, value, threshold) => {\r\n        if (value > threshold) {\r\n            setAlerts((prevAlerts) => [\r\n                ...prevAlerts.slice(-4),\r\n                `${metric} Usage HIGH: ${value}% (Threshold: ${threshold}%)`,\r\n            ]);\r\n        }\r\n    };\r\n\r\n    const createChart = (ctx, label) => {\r\n        return new Chart(ctx, {\r\n            type: \"line\",\r\n            data: {\r\n                labels: Array(50).fill(\"\"),\r\n                datasets: [\r\n                    {\r\n                        label: label,\r\n                        data: [],\r\n                        borderColor: \"rgba(75,192,192,1)\",\r\n                        fill: false,\r\n                    },\r\n                ],\r\n            },\r\n            options: {\r\n                responsive: true,\r\n                scales: {\r\n                    x: { display: false },\r\n                    y: { beginAtZero: true },\r\n                },\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"live-metrics\">\r\n            <h1>Live System Metrics</h1>\r\n\r\n            <div className=\"metrics-container\">\r\n                <div className=\"metric-box\">\r\n                    <h2>CPU Usage</h2>\r\n                    <p>{systemStatus.cpu}%</p>\r\n                    <canvas id=\"cpuChart\"></canvas>\r\n                </div>\r\n                <div className=\"metric-box\">\r\n                    <h2>Memory Usage</h2>\r\n                    <p>{systemStatus.memory}%</p>\r\n                    <canvas id=\"memoryChart\"></canvas>\r\n                </div>\r\n                <div className=\"metric-box\">\r\n                    <h2>Network Traffic</h2>\r\n                    <p>{systemStatus.network} Mbps</p>\r\n                    <canvas id=\"networkChart\"></canvas>\r\n                </div>\r\n            </div>\r\n\r\n            <h2>Active Emulations</h2>\r\n            <ul>\r\n                {activeEmulations.map((emu) => (\r\n                    <li key={emu.id}>\r\n                        {emu.name} - {emu.status}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            <h2>Device Telemetry</h2>\r\n            <ul>\r\n                {Object.entries(deviceMetrics).map(([key, value]) => (\r\n                    <li key={key}>\r\n                        {key}: {value}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n\r\n            {alerts.length > 0 && (\r\n                <div className=\"alerts\">\r\n                    <h2>Alerts</h2>\r\n                    <ul>\r\n                        {alerts.map((alert, index) => (\r\n                            <li key={index}>{alert}</li>\r\n                        ))}\r\n                    </ul>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LiveMetrics;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { listenToMQTT, sendMQTTCommand, subscribeToTopic, unsubscribeFromTopic } from \"../services/mqttService\";\r\nimport \"../styles.css\";\r\n\r\nconst MirrorModal = ({ topic, onClose }) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [command, setCommand] = useState(\"\");\r\n    const [commandStatus, setCommandStatus] = useState(null);\r\n\r\n    useEffect(() => {\r\n        // Subscribe to MQTT topic\r\n        const handleMessage = (message) => {\r\n            setMessages((prev) => [...prev, message]);\r\n        };\r\n\r\n        subscribeToTopic(topic, handleMessage);\r\n        listenToMQTT(topic, handleMessage);  // Real time updates\r\n\r\n        return () => {\r\n            unsubscribeFromTopic(topic); // Properly unsubscribe when closing\r\n        };\r\n    }, [topic]);\r\n\r\n    const handleSendCommand = async () => {\r\n        if (command.trim() === \"\") return;\r\n\r\n        setCommandStatus(\"Sending...\");\r\n        try {\r\n            await sendMQTTCommand(topic, { command });\r\n            setCommandStatus(\"Command sent successfully!\");\r\n            setMessages((prev) => [...prev, `> Sent: ${command}`]);\r\n        } catch (error) {\r\n            setCommandStatus(\"Error: Failed to send command.\");\r\n        } finally {\r\n            setCommand(\"\"); // Clear input\r\n            setTimeout(() => setCommandStatus(null), 3000); // Auto-clear status after 3 seconds\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <h3>Mirror Mode: {topic}</h3>\r\n\r\n            {/* Message Display */}\r\n            <div className=\"message-box\">\r\n                {messages.length > 0 ? (\r\n                    messages.map((msg, idx) => <div key={idx} className=\"message\">{msg}</div>)\r\n                ) : (\r\n                    <p className=\"empty-state\">No messages yet...</p>\r\n                )}\r\n            </div>\r\n\r\n            {/* Command Input */}\r\n            <div className=\"command-box\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={command}\r\n                    onChange={(e) => setCommand(e.target.value)}\r\n                    placeholder=\"Enter command\"\r\n                />\r\n                <button onClick={handleSendCommand}>Send</button>\r\n            </div>\r\n\r\n            {/* Command Status */}\r\n            {commandStatus && <p className=\"status\">{commandStatus}</p>}\r\n\r\n            <button className=\"close-btn\" onClick={onClose}>Close</button>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MirrorModal;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getActiveEmulations } from \"../services/dashboardService\";\r\n\r\nconst ActiveEmulations = () => {\r\n    const [emulations, setEmulations] = useState([]);\r\n    const [filter, setFilter] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        getActiveEmulations().then(setEmulations);\r\n        getActiveEmulations().then((setEmulations) => setEmulations(setEmulations));\r\n\r\n    }, []);\r\n\r\n    const handleFilterChange = (e) => setFilter(e.target.value);\r\n\r\n    const filteredEmulations = emulations.filter((emulation) =>\r\n        Object.values(emulation).some((value) =>\r\n            value.toString().toLowerCase().includes(filter.toLowerCase())\r\n        )\r\n    );\r\n\r\n    return (\r\n        <div style={{ maxHeight: \"150px\", overflowY: \"scroll\", background: \"#fff\", padding: \"10px\" }}>\r\n            <h3>Active Emulations</h3>\r\n            <input\r\n                type=\"text\"\r\n                placeholder=\"Filter...\"\r\n                value={filter}\r\n                onChange={handleFilterChange}\r\n                style={{ marginBottom: \"10px\" }}\r\n            />\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>Name</th>\r\n                        <th>Status</th>\r\n                        <th>Type</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {filteredEmulations.map((emulation, idx) => (\r\n                        <tr key={idx}>\r\n                            <td>{emulation.name}</td>\r\n                            <td>{emulation.status}</td>\r\n                            <td>{emulation.type}</td>\r\n                        </tr>\r\n                    ))}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ActiveEmulations;\r\n","import React from \"react\";\r\nimport HardwarePanel from \"./HardwarePanel\";\r\nimport EmulatorPanel from \"./EmulatorPanel\";\r\nimport MQTTPanel from \"./MQTTPanel\";\r\nimport SerialPanel from \"./SerialPanel\";\r\nimport LiveMetrics from \"./LiveMetrics\";\r\nimport MirrorModal from \"./MirrorModal\";\r\nimport ActiveEmulations from \"./ActiveEmulations\";\r\n\r\n\r\nconst Dashboard = () => {\r\n    return (\r\n        <div style={{ display: \"flex\", flexDirection: \"row\", height: \"100vh\" }}>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#f5f5f5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <HardwarePanel />\r\n            </div>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#e5e5e5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <EmulatorPanel />\r\n            </div>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#d5d5d5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <MQTTPanel />\r\n            </div>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#c5c5c5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <SerialPanel />\r\n            </div> \r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#c5c5c5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <LiveMetrics />\r\n            </div>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#c5c5c5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <MirrorModal />\r\n            </div>\r\n            <div style={{ flex: 1, padding: \"10px\", background: \"#c5c5c5\" }}>\r\n                <h1>Hardware Emulator Dashboard</h1>\r\n                <ActiveEmulations />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import React from \"react\";\nimport Dashboard from \"./components/Dashboard\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Universal Hardware Tester</h1>\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}